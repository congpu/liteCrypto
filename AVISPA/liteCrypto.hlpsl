%%% 1. A -> B : PID, S
%%% 2. A -> B : M1, MAC, Sig
%%% 3. B -> A : A, B, SAC

role role_A(A, B: agent, Pubkey: public_key, Ha:hash_func, Hb:hash_func, SND, RCV: channel(dy))
played_by A
def=
	local
		State:nat,
		Che,Ts,Ts2:text,
		Res,S,PID,M1,MAC1,SIG1,SAC,Key:message
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|>
		State':=2 /\ Che':=new() /\ Res':=Ha(Che') /\ S':=Hb(Res') /\ PID':=Ha(A.S')
		/\ SND({A.B.PID'.S'}_Pubkey)
		/\ Ts':=new() /\ M1':={A.B.PID'.Ts'}_Pubkey /\ MAC1':=Ha(M1') /\ SIG1':={Hb(M1').Ha(S'.PID')}
		/\ SND({M1'.MAC1'.SIG1'.Ts'}_Pubkey)

		/\ secret(M1',sec_1,{A,B})
		/\ secret(S',sec_2,{A,B})

		2. State=2 /\ RCV({A.B.Ts.Ts2'.SAC'}_Pubkey) =|>
		State':=4

		/\ request(A,B,auth_1,MAC1)
		/\ request(A,B,auth_2,SIG1)
		/\ request(A,B,auth_3,M1)
end role

role role_B(A, B: agent, Pubkey: public_key, Ha:hash_func,Hb:hash_func, SND, RCV: channel(dy))
played_by B
def=
	local
		State:nat,
		Ts,Ts2:text,
		PID,S,M1,MAC1,SIG1,SAC,Key:message
	init
		State := 1
	transition
		1. State=1 /\ RCV({A.B.PID'.S'}_Pubkey) /\ RCV({M1'.MAC1'.SIG1'.Ts'}_Pubkey) =|>
		State':=3 /\ Key':=Ha(PID'.S') /\ Ts2':=new() /\ SAC':=Ha(Key,A,B)
		/\ SND({A.B.Ts'.Ts2'.SAC'}_Pubkey)

		/\ secret(SAC',sec_3,{A,B})

		/\ witness(B,A,auth_1,MAC1')
		/\ witness(B,A,auth_2,SIG1')
		/\ witness(B,A,auth_3,M1')
end role

role session(A,B:agent, PubA,PubB: public_key, Ha:hash_func, Hb: hash_func)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_A(A,B,PubB,Ha,Hb,SND1,RCV1) /\ 
		role_B(A,B,PubA,Ha,Hb,SND2,RCV2)
end role

role environment()
def=
	const
		drone,groundstation:agent,
		pubA:public_key,
		pubB:public_key,
		ha:hash_func,
		hb:hash_func,
		sec_1,sec_2,sec_3,auth_1,auth_2,auth_3:protocol_id
	intruder_knowledge = {drone,groundstation,ha,hb}

	composition
		session(drone,groundstation,pubA,pubB,ha,hb)
		/\ session(drone,groundstation,pubA,pubB,ha,hb)
		/\ session(i,groundstation,pubA,pubB,ha,hb)
		/\ session(drone,i,pubA,pubB,ha,hb)
end role

goal
	secrecy_of sec_1
	secrecy_of sec_2
	secrecy_of sec_3
	authentication_on auth_1
	authentication_on auth_2
	authentication_on auth_3
end goal

environment()
